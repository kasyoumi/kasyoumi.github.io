<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>设计模式 on Kasyoumi的博客</title>
    <link>/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</link>
    <description>Recent content in 设计模式 on Kasyoumi的博客</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Thu, 22 Dec 2022 00:00:00 +0000</lastBuildDate><atom:link href="/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>关于代码结构设计的一些思考</title>
      <link>/posts/project-thinking/</link>
      <pubDate>Thu, 22 Dec 2022 00:00:00 +0000</pubDate>
      
      <guid>/posts/project-thinking/</guid>
      <description>其实本文标题我想命名为《通过思考一些低端代码结构设计来领略高大上技术知识这件事》来着 生疏而难理解的工程 网上冲浪时经常能看到微服务、分布式等技术分享。但我们大多数开发面向的都是政企小群体用户，工作中很难实操这些技术。 也就在我们与高大上工程之间筑起了知识障壁。为了能理解高大上的技术，我们从简单的开始分析。
所以接下来我们不聊庞大的工程设计，来看看如何从我们日常的工作中学习这些模式的底层思想。 希望这篇文章能带来一点代码结构设计的启发，这层障壁或许会变薄一些。
从三层架构开始 最简单的架构，最单纯的思想。 为什么要分层 或者说为什么要分层，工作经验使我们能很快的说出是为了方便维护等。分层划分了代码职责，给编码一点约束，增加了点编码难度，但带来层次清晰的架构。我们来看看怎么通过分层得到一个容易维护的代码，或者说为什么分层可以让代码容易维护。
容易维护的代码 页面/表示层、业务逻辑层、数据访问层，三层简单到一句话就可以概括：“各层划分了一下责任，自上而下单向依赖”。按照此模式实现代码过于简单，我们不屑于实现（双手叉腰.jpg）。所以来聊点高大上的架构思路，对了解大型项目，写出容易维护的代码很有帮助。
可以想象如果不分层（划分代码），各种代码写在一个函数中，等到需求变更需要更新代码逻辑时。就像在听歌时需要先掏出牛仔裤裤兜中的有线耳机一样。
为什么会有这种感觉，因为各种职责的代码在一个函数中纵横交错。所以我们通常会根据职责划分代码（分层）。下面是一个简单的 http 后台接口代码，处理用户注册请求。
// 1. 接收浏览器发出的请求 @PostMapping(&amp;quot;/user/register&amp;quot;) fun registerUser( // 2. 提取请求体中的参数数据 @RequestParam name: String, @RequestParam userRole: UserRole ) { // 3. 业务逻辑：用户名不能重复 val isExists = database.query(&amp;quot;select * from user where name=?1&amp;quot;, name) != null if (isExists) { throw RuntimeException(&amp;quot;用户名已存在&amp;quot;) } // 4. 业务逻辑：不能创建管理员角色 if (isAdminRole(userRole)) { throw RuntimeException(&amp;quot;不允许注册为管理员用户&amp;quot;) } // 5. 业务逻辑：注册用户（创建用户对象） val newUser = User(name) user.password = encrypt(randomPwd()) user.registerTime = Instant.</description>
    </item>
    
  </channel>
</rss>
